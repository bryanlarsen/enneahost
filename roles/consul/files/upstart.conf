# upstart is really bad at keeping track of process id's, so we have to be all complicated.
# https://gist.github.com/ismell/6281967

description "Docker Container: consul"
start on filesystem and started docker
stop on stopping docker
kill timeout 20 # longer than docker timeout of 10 seconds
kill signal CONT # don't send TERM
respawn

pre-start script
  mkdir -p /var/run/docker
  mkdir -p /var/consul-data

  # Wait for docker to finish starting up first.
  FILE=/var/run/docker.sock
  while [ ! -e $FILE ] ; do
    sleep 1
  done
end script

script
  [ -f "/var/run/docker/consul.cid" ] && { ID="$(cat /var/run/docker/consul.cid)"; }

  if [ ! -z "${ID}" ] && ( docker ps | grep -q "${ID}" ); then
    exec docker wait "${ID}"
  else
    exec docker run --hostname="$(hostname)" -v /var/consul-data:/data -p 8400:8400 -p 8500:8500 -p 8600:53/udp progrium/consul:latest -server -bootstrap -client=0.0.0.0
  fi
end script

post-start script
  [ -f "/var/run/docker/consul.cid" ] && { ID="$(cat /var/run/docker/consul.cid)"; }

  if [ -z "${ID}" ] || ! ( docker ps | grep -q "${ID}" ); then
    # may need to wait for the image to be pulled
    while ! ( docker ps | grep -q progrium/consul:latest ) ; do sleep 1 ; done
    docker ps | grep progrium/consul:latest | cut -d " " -f 1 > /var/run/docker/consul.cid
  fi
end script

pre-stop script
  [ -f "/var/run/docker/consul.cid" ] && { ID="$(cat /var/run/docker/consul.cid)"; }
  if [ ! -z "${ID}" ]; then
     docker stop "${ID}" && rm /var/run/docker/consul.cid
  fi

  while ! curl --output /dev/null --silent --head --fail http://consul.service.consul:8500/v1/agent/self ; do
    sleep 1
  done
end script